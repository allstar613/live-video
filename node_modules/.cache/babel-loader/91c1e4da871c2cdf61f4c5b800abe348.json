{"remainingRequest":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js!C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js!C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\workspace\\live-video\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\workspace\\live-video\\src\\components\\Detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\workspace\\live-video\\src\\components\\Detail.vue","mtime":1569574563058},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:\\\\workspace\\\\live-video\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from \"vuex\";\nimport { localStorageUtil } from \"@/util.js\";\nexport default {\n  props: [\"id\"],\n  data: function data() {\n    return {\n      isNotificationVisible: true,\n      currentID: 0\n    };\n  },\n  components: {},\n  methods: _objectSpread({}, mapActions({\n    getPlayContent: \"content/getPlayContent\",\n    getRecommendVideoList: \"content/getRecommendVideoList\",\n    testCDN: \"cdn/testCDN\"\n  }), {\n    showNotification: function showNotification() {\n      this.$emit(\"show-notification\");\n    },\n    nextVedio: function nextVedio() {\n      localStorageUtil.create(\"currentID\", this.recommendVideoList.next);\n      var params = {\n        id: this.recommendVideoList.next\n      };\n      this.getRecommendVideoList(params);\n    },\n    previousVedio: function previousVedio() {\n      localStorageUtil.create(\"currentID\", this.recommendVideoList.previous);\n      var params = {\n        id: this.recommendVideoList.previous\n      };\n      this.getRecommendVideoList(params);\n    },\n    changeVedio: function changeVedio(recommend) {\n      var params = {\n        id: recommend.id\n      };\n      this.getRecommendVideoList(params);\n    },\n    CDN: function CDN() {\n      var _this = this;\n\n      if (this.timer) {\n        clearInterval(this.timer);\n      } else {\n        this.timer = setInterval(function () {\n          _this.testCDN();\n        }, 60000);\n      }\n    }\n  }),\n  computed: _objectSpread({}, mapState({\n    playData: function playData(state) {\n      return state.content.playData;\n    },\n    recommendVideoList: function recommendVideoList(state) {\n      return state.content.recommendVideoList;\n    },\n    cdn: function cdn(state) {\n      return state.cdn.cdn;\n    }\n  }), {\n    currentVedio: function currentVedio() {\n      return this.recommendVideoList.current;\n    },\n    recommendVedio: function recommendVedio() {\n      return this.recommendVideoList.data;\n    }\n  }),\n  created: function created() {\n    if (localStorageUtil.read(\"video\")) {\n      this.currentID = localStorageUtil.read(\"video\");\n    } else {\n      this.currentID = localStorageUtil.read(\"currentID\");\n    }\n\n    var params = {\n      id: this.currentID\n    };\n    this.getRecommendVideoList(params);\n  },\n  mounted: function mounted() {\n    this.testCDN();\n    this.CDN();\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.timer);\n  }\n};",null]}