{"remainingRequest":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js!C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js!C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\workspace\\live-video\\src\\store\\modules\\main.js","dependencies":[{"path":"C:\\workspace\\live-video\\src\\store\\modules\\main.js","mtime":1569578125724},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\workspace\\\\live-video\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport api from '@/api';\nimport { errorLogger } from '@/util.js';\nvar state = {\n  infoList: {},\n  videoList: {}\n}; // getters\n\nvar getters = {};\nvar actions = {\n  getInfo: function () {\n    var _getInfo = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref, params) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return api.getInfo(params).then(function (data) {\n                console.log(data);\n\n                if (data) {\n                  commit(\"getInfo\", data);\n                }\n              }).catch(function (err) {\n                errorLogger(err, \"actions: getInfo\");\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getInfo(_x, _x2) {\n      return _getInfo.apply(this, arguments);\n    }\n\n    return getInfo;\n  }(),\n  getVideoList: function () {\n    var _getVideoList = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref2, params) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return api.getVideoList(params).then(function (data) {\n                if (data) {\n                  commit('getVideoList', data);\n                }\n              }).catch(function (err) {\n                errorLogger(err, 'actions: getVideoList');\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getVideoList(_x3, _x4) {\n      return _getVideoList.apply(this, arguments);\n    }\n\n    return getVideoList;\n  }()\n};\nvar mutations = {\n  getInfo: function getInfo(state, payload) {\n    state.infoList = payload;\n  },\n  getVideoList: function getVideoList(state, payload) {\n    state.videoList = payload;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",null]}