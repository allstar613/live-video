{"remainingRequest":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js!C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\workspace\\live-video\\src\\store\\modules\\pay.js","dependencies":[{"path":"C:\\workspace\\live-video\\src\\store\\modules\\pay.js","mtime":1569476460007},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\workspace\\\\live-video\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport api from '@/api';\nimport { errorLogger } from '@/util.js';\nvar state = {\n  payList: {\n    \"status\": '',\n    \"message\": \"\",\n    \"data\": {\n      \"img\": \"\",\n      \"money\": \"\",\n      \"time\": \"\",\n      \"orderid\": \"\"\n    }\n  },\n  checkList: {}\n}; // getters\n\nvar getters = {};\nvar actions = {\n  createPay: function () {\n    var _createPay = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref, params) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return api.createPay(params).then(function (data) {\n                if (data) {\n                  commit('createPay', data);\n                }\n              }).catch(function (err) {\n                errorLogger(err, 'actions: createPay');\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createPay(_x, _x2) {\n      return _createPay.apply(this, arguments);\n    }\n\n    return createPay;\n  }(),\n  checkPayCheck: function () {\n    var _checkPayCheck = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref2, params) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log(params);\n              _context2.next = 4;\n              return api.checkPayCheck(params).then(function (data) {\n                console.log(data);\n\n                if (data) {\n                  commit('checkPayCheck', data);\n                }\n              }).catch(function (err) {\n                errorLogger(err, 'actions: checkPayCheck');\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function checkPayCheck(_x3, _x4) {\n      return _checkPayCheck.apply(this, arguments);\n    }\n\n    return checkPayCheck;\n  }()\n};\nvar mutations = {\n  createPay: function createPay(state, payload) {\n    state.payList = payload;\n  },\n  checkPayCheck: function checkPayCheck(state, payload) {\n    state.checkList = payload;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["C:\\workspace\\live-video\\src\\store\\modules\\pay.js"],"names":["api","errorLogger","state","payList","checkList","getters","actions","createPay","params","commit","then","data","catch","err","checkPayCheck","console","log","mutations","payload","namespaced"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,EAAE;AACL,cAAU,EADL;AAEL,eAAW,EAFN;AAGL,YAAQ;AACN,aAAO,EADD;AAEN,eAAS,EAFH;AAGN,cAAQ,EAHF;AAIN,iBAAW;AAJL;AAHH,GADC;AAWVC,EAAAA,SAAS,EAAE;AAXD,CAAd,C,CAeA;;AACA,IAAMC,OAAO,GAAG,EAAhB;AAIA,IAAMC,OAAO,GAAG;AACNC,EAAAA,SADM;AAAA;AAAA;AAAA,mDACgBC,MADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,cAAAA,MADN,QACMA,MADN;AAAA;AAAA,qBAEFT,GAAG,CAACO,SAAJ,CAAcC,MAAd,EAAsBE,IAAtB,CAA2B,UAAAC,IAAI,EAAI;AACrC,oBAAIA,IAAJ,EAAU;AACNF,kBAAAA,MAAM,CAAC,WAAD,EAAcE,IAAd,CAAN;AACH;AACJ,eAJK,EAIHC,KAJG,CAIG,UAAAC,GAAG,EAAI;AACZZ,gBAAAA,WAAW,CAACY,GAAD,EAAM,oBAAN,CAAX;AACH,eANK,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAUNC,EAAAA,aAVM;AAAA;AAAA;AAAA,qDAUoBN,MAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAUUC,cAAAA,MAVV,SAUUA,MAVV;AAYRM,cAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAZQ;AAAA,qBAcFR,GAAG,CAACc,aAAJ,CAAkBN,MAAlB,EAA0BE,IAA1B,CAA+B,UAAAC,IAAI,EAAI;AACzCI,gBAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;;AACA,oBAAIA,IAAJ,EAAU;AACNF,kBAAAA,MAAM,CAAC,eAAD,EAAkBE,IAAlB,CAAN;AACH;AACJ,eALK,EAKHC,KALG,CAKG,UAAAC,GAAG,EAAI;AACZZ,gBAAAA,WAAW,CAACY,GAAD,EAAM,wBAAN,CAAX;AACH,eAPK,CAdE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAhB;AAyBA,IAAMI,SAAS,GAAG;AACdV,EAAAA,SADc,qBACJL,KADI,EACGgB,OADH,EACY;AACtBhB,IAAAA,KAAK,CAACC,OAAN,GAAgBe,OAAhB;AACH,GAHa;AAIdJ,EAAAA,aAJc,yBAIAZ,KAJA,EAIOgB,OAJP,EAIgB;AAC1BhB,IAAAA,KAAK,CAACE,SAAN,GAAkBc,OAAlB;AACH;AANa,CAAlB;AASA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXjB,EAAAA,KAAK,EAALA,KAFW;AAGXG,EAAAA,OAAO,EAAPA,OAHW;AAIXC,EAAAA,OAAO,EAAPA,OAJW;AAKXW,EAAAA,SAAS,EAATA;AALW,CAAf","sourcesContent":["import api from '@/api'\r\nimport { errorLogger } from '@/util.js';\r\n\r\nconst state = {\r\n    payList: {\r\n        \"status\": '',\r\n        \"message\": \"\",\r\n        \"data\": {\r\n          \"img\": \"\",\r\n          \"money\": \"\",\r\n          \"time\": \"\",\r\n          \"orderid\": \"\" ,\r\n        }\r\n    },\r\n    checkList: {\r\n    }\r\n};\r\n\r\n// getters\r\nconst getters = {\r\n\r\n};\r\n\r\nconst actions = {\r\n    async createPay({ commit }, params) {\r\n        await api.createPay(params).then(data => {\r\n            if (data) {\r\n                commit('createPay', data);\r\n            }\r\n        }).catch(err => {\r\n            errorLogger(err, 'actions: createPay');\r\n        });\r\n    },\r\n    async checkPayCheck({ commit }, params) {\r\n\r\n        console.log(params);\r\n\r\n        await api.checkPayCheck(params).then(data => {\r\n            console.log(data);\r\n            if (data) {\r\n                commit('checkPayCheck', data);\r\n            }\r\n        }).catch(err => {\r\n            errorLogger(err, 'actions: checkPayCheck');\r\n        });\r\n    },\r\n};\r\n\r\nconst mutations = {\r\n    createPay(state, payload) {\r\n        state.payList = payload;\r\n    },\r\n    checkPayCheck(state, payload) {\r\n        state.checkList = payload;\r\n    },\r\n};\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n}"]}]}