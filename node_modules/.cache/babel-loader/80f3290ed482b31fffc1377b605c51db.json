{"remainingRequest":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js!C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js!C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\workspace\\live-video\\src\\store\\modules\\cdn.js","dependencies":[{"path":"C:\\workspace\\live-video\\src\\store\\modules\\cdn.js","mtime":1569563683667},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\workspace\\\\live-video\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport api from '@/api';\nimport { errorLogger } from '@/util.js';\nvar state = {\n  cdn: 1\n}; // getters\n\nvar getters = {};\nvar actions = {\n  testCDN: function () {\n    var _testCDN = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return api.testCdn().then(function (data) {\n                if (data) {\n                  commit('testCdn', data);\n                }\n              }).catch(function (err) {\n                errorLogger(err, 'actions: testCdn');\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function testCDN(_x) {\n      return _testCDN.apply(this, arguments);\n    }\n\n    return testCDN;\n  }()\n};\nvar mutations = {\n  testCdn: function testCdn(state, payload) {\n    state.cdn = payload;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",null]}