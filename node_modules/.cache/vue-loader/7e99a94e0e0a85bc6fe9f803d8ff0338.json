{"remainingRequest":"C:\\workspace\\live-video\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\workspace\\live-video\\src\\components\\Detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\workspace\\live-video\\src\\components\\Detail.vue","mtime":1569492101125},{"path":"C:\\workspace\\live-video\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\live-video\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from \"vuex\";\nimport { localStorageUtil } from \"@/util.js\";\n\nexport default {\n  props: [\"id\"],\n  data: () => ({\n    isNotificationVisible: true,\n    currentID: 0\n  }),\n  components: {},\n  methods: {\n    ...mapActions({\n      getPlayContent: \"content/getPlayContent\",\n      getRecommendVideoList: \"content/getRecommendVideoList\",\n      testCDN: \"cdn/testCDN\"\n    }),\n    showNotification() {\n      this.$emit(\"show-notification\");\n    },\n    nextVedio() {\n      localStorageUtil.create(\"currentID\", this.recommendVideoList.next);\n\n      console.log(this.ID);\n      const params = {\n        id: this.recommendVideoList.next\n      };\n      this.getRecommendVideoList(params);\n    },\n    previousVedio() {\n      localStorageUtil.create(\"currentID\", this.recommendVideoList.previous);\n      console.log(this.ID);\n      const params = {\n        id: this.recommendVideoList.previous\n      };\n      this.getRecommendVideoList(params);\n    },\n    changeVedio(recommend) {\n      const params = {\n        id: recommend.id\n      };\n      this.getRecommendVideoList(params);\n    },\n    CDN() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      } else {\n        this.timer = setInterval(() => {\n          this.testCDN();\n        }, 60000);\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      playData: state => state.content.playData,\n      recommendVideoList: state => state.content.recommendVideoList,\n      cdn: state => state.cdn.cdn\n    }),\n    currentVedio() {\n      return this.recommendVideoList.current;\n    },\n    recommendVedio() {\n      return this.recommendVideoList.data;\n    }\n  },\n  created() {\n    if (localStorageUtil.read(\"video\")) {\n      this.currentID = localStorageUtil.read(\"video\");\n    } else {\n      this.currentID = localStorageUtil.read(\"currentID\");\n    }\n\n    const params = {\n      id: this.currentID\n    };\n    this.getRecommendVideoList(params);\n  },\n  mounted() {\n    this.testCDN();\n    this.CDN();\n    console.log(this.recommendVideoList);\n  },\n  destroyed() {\n    clearInterval(this.timer);\n  }\n};\n",null]}